{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","Resources.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","Map","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Resources","href","target","Footer","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapCenters","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.606b4149.chunk.js","sourcesContent":["// import React from 'react'\r\n// import \"./Infobox.css\"\r\n// import {Card, CardContent, Typography} from \"@material-ui/core\";\r\n\r\n// function InfoBox({title, cases, isRed, active, total , ...props}) {\r\n//     return (\r\n//         <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"info--red\"}`}>\r\n//         <CardContent >\r\n//             <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n//                {title}\r\n//             </Typography>\r\n//             <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n//             <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n//                 {total} total\r\n//             </Typography>\r\n//         </CardContent>\r\n            \r\n//         </Card>\r\n//     )\r\n// }\r\n\r\n// export default InfoBox;\r\n\r\n\r\nimport React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n\r\n","\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Line } from \"react-chartjs-2\";\r\n// import numeral from \"numeral\";\r\n\r\n// const options = {\r\n//   legend: {\r\n//     display: false,\r\n//   },\r\n//   elements: {\r\n//     point: {\r\n//       radius: 0,\r\n//     },\r\n//   },\r\n//   maintainAspectRatio: false,\r\n//   tooltips: {\r\n//     mode: \"index\",\r\n//     intersect: false,\r\n//     callbacks: {\r\n//       label: function (tooltipItem, data) {\r\n//         return numeral(tooltipItem.value).format(\"+0,0\");\r\n//       },\r\n//     },\r\n//   },\r\n//   scales: {\r\n//     xAxes: [\r\n//       {\r\n//         type: \"time\",\r\n//         time: {\r\n//           format: \"MM/DD/YY\",\r\n//           tooltipFormat: \"ll\",\r\n//         },\r\n//       },\r\n//     ],\r\n//     yAxes: [\r\n//       {\r\n//         gridLines: {\r\n//           display: false,\r\n//         },\r\n//         ticks: {\r\n//           // Include a dollar sign in the ticks\r\n//           callback: function (value, index, values) {\r\n//             return numeral(value).format(\"0a\");\r\n//           },\r\n//         },\r\n//       },\r\n//     ],\r\n//   },\r\n// };\r\n\r\n// const buildChartData = (data, casesType) => {\r\n//   let chartData = [];\r\n//   let lastDataPoint;\r\n//   for (let date in data.cases) {\r\n//     if (lastDataPoint) {\r\n//       let newDataPoint = {\r\n//         x: date,\r\n//         y: data[casesType][date] - lastDataPoint,\r\n//       };\r\n//       chartData.push(newDataPoint);\r\n//     }\r\n//     lastDataPoint = data[casesType][date];\r\n//   }\r\n//   return chartData;\r\n// };\r\n\r\n// function LineGraph({ casesType , ...props}) {\r\n//   const [data, setData] = useState({});\r\n  \r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n//         .then((response) => {\r\n//           return response.json();\r\n//         })\r\n//         .then((data) => {\r\n//           let chartData = buildChartData(data, casesType);\r\n//           setData(chartData);\r\n         \r\n//           // buildChart(chartData);\r\n//         });\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, [casesType]);\r\n\r\n\r\n//   return (\r\n//     <div className={props.className}>\r\n//       {data?.length > 0 && (\r\n//         <Line\r\n//           data={{\r\n//             datasets: [\r\n//               {\r\n//                 backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n//                 borderColor: \"#CC1034\",\r\n//                  data: data,\r\n//               },\r\n//             ],\r\n//           }}\r\n//           options={options}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default LineGraph;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType , ...props}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n\r\n","// import React from 'react';\r\n// import \"./Table.css\";\r\n// import numeral from \"numeral\";\r\n\r\n// function Table({countries}) {\r\n//     return (\r\n//         <div className=\"table\">\r\n//             {countries.map(({country, cases})=>(\r\n//             <tr>  \r\n//                 <td>{country}</td>\r\n//                 <td>{numeral(cases).format(\"0,0\")}</td>\r\n//             </tr>\r\n\r\n\r\n//             ))}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default Table\r\n\r\n\r\nimport React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n\r\n\r\n","// import React from \"react\";\r\n// import numeral from \"numeral\";\r\n// import { Circle, Popup } from \"react-leaflet\";\r\n\r\n// const casesTypeColors = {\r\n//   cases: {\r\n//     hex: \"#CC1034\",\r\n//     rgb: \"rgb(204, 16, 52)\",\r\n//     half_op: \"rgba(204, 16, 52, 0.5)\",\r\n//     multiplier: 800,\r\n//   },\r\n//   recovered: {\r\n//     hex: \"#7dd71d\",\r\n//     rgb: \"rgb(125, 215, 29)\",\r\n//     half_op: \"rgba(125, 215, 29, 0.5)\",\r\n//     multiplier: 1200,\r\n//   },\r\n//   deaths: {\r\n//     hex: \"#fb4443\",\r\n//     rgb: \"rgb(251, 68, 67)\",\r\n//     half_op: \"rgba(251, 68, 67, 0.5)\",\r\n//     multiplier: 2000,\r\n//   },\r\n// };\r\n\r\n//  const sortData = (data) => {\r\n//   let sortedData = [...data];\r\n//   sortedData.sort((a, b) => {\r\n//     if (a.cases > b.cases) {\r\n//       return -1;\r\n//     } else {\r\n//       return 1;\r\n//     }\r\n//   });\r\n//   return sortedData;\r\n// };\r\n\r\n//  const prettyPrintStat = (stat) =>\r\n//   stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//  const showDataOnMap = (data, casesType = \"cases\") =>\r\n//   data.map((country) => (\r\n//     <Circle\r\n//       center={[country.countryInfo.lat, country.countryInfo.long]}\r\n//       color={casesTypeColors[casesType].hex}\r\n//       fillColor={casesTypeColors[casesType].hex}\r\n//       fillOpacity={0.4}\r\n//       radius={\r\n//         Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n//       }\r\n//     >\r\n//       <Popup>\r\n//         <div className=\"info-container\">\r\n//           <div\r\n//             className=\"info-flag\"\r\n//             style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n//           ></div>\r\n//           <div className=\"info-name\">{country.country}</div>\r\n//           <div className=\"info-confirmed\">\r\n//             Cases: {numeral(country.cases).format(\"0,0\")}\r\n//           </div>\r\n//           <div className=\"info-recovered\">\r\n//             Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n//           </div>\r\n//           <div className=\"info-deaths\">\r\n//             Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n//           </div>\r\n//         </div>\r\n//       </Popup>\r\n//     </Circle>\r\n//   ));\r\n\r\n \r\n\r\n\r\n\r\n// //  export { sortData , showDataOnMap , prettyPrintStat};  \r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","// import React from 'react'\r\n// import \"./Map.css\";\r\n// import {Map as LeafletMap , TileLayer} from \"react-leaflet\";\r\n// import {showDataOnMap} from \"./utils\";\r\n\r\n// function Map({countries, casesType, center , zoom}) {\r\n//     return (\r\n//         <div className=\"map\">\r\n//            <LeafletMap center={center} zoom={zoom}>\r\n//                <TileLayer \r\n//                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//                    attribution='&copy;<a href=\"http://osm.org/copyright\">OpenStreetMap</a>contributors'\r\n//                />\r\n//                {showDataOnMap(countries ,  casesType)}\r\n//            </LeafletMap>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default Map\r\n\r\n\r\nimport React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Resources.css';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\n\r\n\r\nfunction Resources() {\r\n    return (\r\n        <div className=\"resources\">\r\n            <Tabs>\r\n            <div className=\"list\">\r\n    <TabList >\r\n      <Tab>Coronavirus</Tab>\r\n      <Tab>Symtoms</Tab>\r\n      <Tab>Prevention</Tab>\r\n      <Tab>Resources</Tab>\r\n    </TabList>\r\n    </div>\r\n    <TabPanel>\r\n     <div className=\"resources__content\">\r\n     <p> Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.</p>\r\n     <br/>\r\n     <p>Most people who fall sick with COVID-19 will experience mild to moderate symptoms and recover without special treatment.</p>\r\n      <br />\r\n      <h3>HOW IT SPREADS</h3>\r\n      <br/>\r\n     <p>The virus that causes COVID-19 is mainly transmitted through droplets generated when an infected person coughs, sneezes, or exhales. These droplets are too heavy to hang in the air, and quickly fall on floors or surfaces.</p>\r\n      <br />\r\n      <p>You can be infected by breathing in the virus if you are within close proximity of someone who has COVID-19, or by touching a contaminated surface and then your eyes, nose or mouth.</p>\r\n      <br/>\r\n      <p>\r\n        Source:{' '}\r\n        <a href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\" target=\"_blank\">\r\n         who.int\r\n        </a>\r\n      </p>\r\n      </div>\r\n    </TabPanel>\r\n    <TabPanel>\r\n    <div className=\"resources__content\">\r\n            <p>COVID-19 affects different people in different ways. Most infected people will develop mild to moderate illness and recover without hospitalization.</p>\r\n            <br/>\r\n            <p>Most common symptoms:</p>\r\n            <ul>  \r\n            <li>Fever</li>\r\n            <li>Dry cough</li>\r\n            <li>Tiredness</li>\r\n            </ul>\r\n            <br/>\r\n            <p>Less common symptoms:</p>\r\n            <ul>\r\n            <li>aches and pains </li>\r\n            <li>sore throat </li>\r\n            <li>diarrhoea</li>\r\n            <li>conjunctivitis</li>\r\n            <li>headache </li>\r\n            <li>loss of taste or smell </li>\r\n            </ul>\r\n            <br/>\r\n            <p>\r\n                serious symptoms:\r\n            </p>\r\n            <ul>\r\n                <li>difficulty breathing or shortness of breath</li>\r\n                <li>chest pain or pressure</li>\r\n                <li>loss of speech or movement</li>\r\n            </ul>\r\n            <br />\r\n            <p>Seek immediate medical attention if you have serious symptoms. Always call before visiting your doctor or health facility.</p>\r\n            <br />\r\n            <p>People with mild symptoms who are otherwise healthy should manage their symptoms at home.</p>\r\n            <br/>\r\n            <p>On average it takes 5–6 days from when someone is infected with the virus for symptoms to show, however it can take up to 14 days.</p>\r\n             <br />\r\n            <p>\r\n        Source:{' '}\r\n        <a href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/question-and-answers-hub/q-a-detail/q-a-coronaviruses#:~:text=symptoms\" target=\"_blank\">\r\n         who.int\r\n        </a>\r\n        </p>\r\n        </div>\r\n    </TabPanel>\r\n    <TabPanel>\r\n    <div className=\"resources__content\">\r\n        <p>Protect yourself and others around you by knowing the facts and taking appropriate precautions. Follow advice provided by your local health authority.\r\n       </p>\r\n       <br />\r\n       <p>To prevent the spread of COVID-19:</p>\r\n       <ul>\r\n           <li>Clean your hands often. Use soap and water, or an alcohol-based hand rub.</li>\r\n           <li>Maintain a safe distance from anyone who is coughing or sneezing.</li>\r\n           <li>Wear a mask when physical distancing is not possible.</li>\r\n           <li>Don’t touch your eyes, nose or mouth.</li>\r\n           <li>Cover your nose and mouth with your bent elbow or a tissue when you cough or sneeze.</li>\r\n           <li>Stay home if you feel unwell.</li>\r\n           <li>If you have a fever, cough and difficulty breathing, seek medical attention.</li>\r\n       </ul>\r\n       <br />\r\n       <p>Calling in advance allows your healthcare provider to quickly direct you to the right health facility. This protects you, and prevents the spread of viruses and other infections.</p>\r\n       <br />\r\n       <p>Masks</p>\r\n       <br/>\r\n       <p>Masks can help prevent the spread of the virus from the person wearing the mask to others. Masks alone do not protect against COVID-19, and should be combined with physical distancing and hand hygiene. Follow the advice provided by your local health authority.</p>\r\n       <br/>\r\n        <p>\r\n        Source:{' '}\r\n        <a href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/advice-for-public\" target=\"_blank\">\r\n         who.int\r\n        </a>\r\n        </p>\r\n        </div>\r\n    </TabPanel>\r\n   \r\n    <TabPanel>\r\n     <div className=\"resources__content\">\r\n        <p>Iam done this because of not only for awarness but also to improve my coding knowleadge</p>\r\n        <br/>\r\n        <p>The Resources i used in this project</p>\r\n        <ul>\r\n            <li><a href=\"https://disease.sh/\">disease.sh</a> where i get the day-to-day corona cases, recovered, and death's information across the world</li>\r\n            <li><a href=\"https://www.who.int/\">who.int</a></li>\r\n        </ul>\r\n        </div>\r\n    </TabPanel>\r\n  </Tabs>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Resources\r\n\r\n\r\n","import React from 'react'\r\nimport \"./Footer.css\";\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p>Made with ❤ by Sivashankar</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","// import React, { useState , useEffect} from 'react';\n// import {MenuItem , FormControl , Select, Card, CardContent} from \"@material-ui/core\"\n// import InfoBox from \"./InfoBox.js\";\n// import './App.css';\n// import Map from \"./Map\";\n// import Table from \"./Table\"\n// import {sortData , prettyPrintStat} from \"./utils\";\n// import LineGraph from \"./LineGraph\"\n// import \"leaflet/dist/leaflet.css\"\n\n// function App() {\n\n//   const[countries , setCountries]= useState([]);\n//   const[country , setCountry]= useState(\"worldwide\");\n//   const[countryInfo , setCountryInfo]=useState({});\n//   const[tableData, setTableData]=useState([]);\n//   const[mapCenter, setMapCenter]= useState({lat : 34.80746 , lng: -40.4796});\n//   const[mapZoom , setMapZoom]=useState(3);\n//   const[mapCountries, setMapCountries]=useState([]);\n//   const[casesType , setCasesType]=useState(\"cases\");\n\n//   useEffect(()=>{\n//     fetch(\"https://disease.sh/v3/covid-19/all\")\n//     .then((response)=> response.json())\n//     .then((data)=>{\n//       setCountryInfo(data)\n//     });\n//   },[]);\n\n// useEffect(()=>{\n\n//   const getCountriesData =  async () => {\n//       await fetch(\"https://disease.sh/v3/covid-19/countries\")\n//       .then((response)=> response.json())\n//       .then((data)=>{\n//         const countries = data.map((country)=>(\n//            {\n//              name : country.country,\n//              value : country.countryInfo.iso2,\n            \n//            }));\n//            const sortedData =sortData(data);\n//            setTableData(sortedData);\n//            setCountries(countries);\n//            setMapCountries(data);\n//       });\n//   };\n//   getCountriesData();\n// }, []);\n\n// const onCountryChange = async (event)=> {\n//   const countryCode = event.target.value ;\n \n//   const url = countryCode===\"worldwide\"? \"https://disease.sh/v3/covid-19/all\":`https://disease.sh/v3/covid-19/countries/${countryCode}`  \n//    await fetch(url)\n//    .then((response)=> response.json())\n//    .then((data) => { \n//        setCountryInfo(data);\n//        setCountry(countryCode);\n//        setMapCenter([data.countryInfo.lat , data.countryInfo.long]);\n//        setMapZoom(4);\n//    });\n  \n// };\n// console.log(countryInfo);\n\n//   return (\n//     <div className=\"app\">\n//     <div className=\"app__left\">\n//     <div className=\"app__header\">\n//     <h1>COVID-19 TRACKER</h1>\n//       <FormControl className=\"app__dropdown\">\n//         <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n//         <MenuItem value=\"worldwide\">worldwide</MenuItem>\n//         {countries.map(country=> (\n//           <MenuItem value={country.value}>{country.name}</MenuItem>\n//         ))}\n//           {/* <MenuItem value=\"worldwide\">siva </MenuItem>\n//           <MenuItem value=\"worldwide\">shankar</MenuItem>\n//           <MenuItem value=\"worldwide\">hiii</MenuItem>\n//           <MenuItem value=\"worldwide\">policy</MenuItem> */}\n//         </Select>\n//       </FormControl>\n//     </div>\n//     <div className=\"app__stats\">\n//      <InfoBox isRed active={casesType===\"cases\"} onClick={(e)=> setCasesType(\"cases\")} title=\"cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n//      <InfoBox active={casesType===\"recovered\"} onClick={(e)=> setCasesType(\"recovered\")} title=\"Recovered\"cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n//      <InfoBox isRed active={casesType===\"deaths\"} onClick={(e)=> setCasesType(\"deaths\")} title=\"Deaths\"cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n//      </div>\n//      <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n//      </div>\n//      <Card className=\"app__right\">\n//        <CardContent>\n//        <div className=\"app__information\">\n//             <h3>Live Cases by Country</h3>\n//             <Table countries={tableData} />\n//             <h3  className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n//             <LineGraph  className=\"app__graph\" casesType={casesType} />\n//           </div>\n//          {/* <h2>Live cases by country</h2>\n//          <Table countries={tableData}/>\n//          <h2 className=\"app__graphTitle\">worldwide new {casesType}</h2>\n//          <LineGraph className=\"app__graph\" casesType={casesType} /> */}\n//        </CardContent>\n//      </Card>\n//      </div>\n    \n//   );\n// }\n\n// export default App;\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport Resources from \"./Resources\";\nimport Footer from \"./Footer\"\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 28.644800, lng: 77.216721 });\n  const [mapCenters , setMapCenters]= useState({ lat: 28.644800, lng: 77.216721});\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        if(countryCode === \"worldwide\"){\n          setMapCenter(mapCenters);\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        }\n        setMapZoom(4);\n      });\n  };\n \n\n  return (\n    <div className=\"app__top\">\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem   value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3  className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n            <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    \n    </div>\n    <div className=\"app__bottom\">\n        <Resources />\n     </div>\n     <div className=\"app__footer\">\n       <Footer />\n     </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// serviceWorker.unregister();"],"sourceRoot":""}